services:
  mongo:
    image: 'mongo:latest'
    container_name: mongo_container
    environment:
      - 'MONGO_INITDB_DATABASE=wishlist'
      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    networks:
      - loadbalancing

  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    networks:
      - loadbalancing

  backend:
    build:
      context: .
      dockerfile: DockerFiles/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_MONGO_URI: mongodb://root:secret@mongo:27017/wishlist?authSource=admin
      SPRING_REDIS_CONNECTION: redis://redis:6379
      SPRING_BOOT_ADMIN_CLIENT_URL: http://nginx:80
    depends_on:
      - mongo
      - redis
    networks:
      - loadbalancing
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"

  nginx:
    image: nginx:latest
    container_name: nginx_load_balancer
    ports:
      - "8082:80"
    volumes:
      - ./DockerFiles/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - loadbalancing
    depends_on:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./DockerFiles/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend
    networks:
      - loadbalancing

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - loadbalancing


volumes:
  redis_data:

networks:
  loadbalancing: